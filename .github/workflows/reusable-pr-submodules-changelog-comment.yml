on:
  workflow_call:
    inputs:
      runs-on:
        description: 'runner labels json string'
        default: '[ "ubuntu-latest" ]'
        required: false
        type: string
      template:
        description: 'comment template text'
        required: true
        type: string
      owner:
        description: 'git repository owner'
        default: "${{ github.repository_owner }}"
        required: false
        type: string
      repo:
        description: 'git repository name'
        default: "${{ github.event.repository.name }}"
        required: false
        type: string
      pr:
        description: 'pull request number'
        default: "${{ github.event.number || '' }}"
        required: false
        type: string
      from:
        description: 'git commit revision range start from'
        default: "${{ github.event.pull_request.base.sha || '' }}"
        required: false
        type: string
      to:
        description: 'git commit revision range end to'
        default: "${{ github.event.pull_request.head.sha || '' }}"
        required: false
        type: string
      host:
        description: 'github host'
        default: github.com
        type: string
      gh_comment_options:
        description: 'gh pr comment options'
        default: ''
        required: false
        type: string

    secrets:
      GH_TOKEN:
        required: false
      GH_ENTERPRISE_TOKEN:
        required: false

env:
  GH_HOST: ${{ inputs.host }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GH_ENTERPRISE_TOKEN: ${{ secrets.GH_ENTERPRISE_TOKEN }}

jobs:
  get-submodules-diff:
    runs-on: "${{ fromJSON(inputs.runs-on) }}"
    outputs:
      submodules: ${{ steps.submodules.outputs.submodules }}
    steps:
      - name: $github
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GITHUB_CONTEXT}"
        if: false
      - name: Resolove to
        id: resolve-to
        run: |
          TO_SHA=$(gh pr view ${{ inputs.pr }} --repo "${{ inputs.owner }}/${{ inputs.repo }}" --json headRefOid --jq '.headRefOid')
          echo "sha=${TO_SHA}" >> "${GITHUB_OUTPUT}"
        if: inputs.to == ''
      - name: Resolove from
        env:
          INPUTS_TO: "${{ inputs.to || steps.resolve-to.outputs.sha }}"
        id: resolve-from
        run: |
          FROM_REF=$(gh pr view ${{ inputs.pr }} --repo "${{ inputs.owner }}/${{ inputs.repo }}" --json baseRefName --jq '.baseRefName')
          FROM_SHA=$(gh api "repos/${{ inputs.owner }}/${{ inputs.repo }}/compare/${FROM_REF}...${INPUTS_TO}" --jq '.merge_base_commit.sha')
          echo "sha=${FROM_SHA}" >> "${GITHUB_OUTPUT}"
        if: inputs.from == ''
      - name: Get submodules form/to
        shell: bash
        id: submodules
        env:
          INPUTS_HOST: "${{ inputs.host }}"
          INPUTS_FROM: "${{ inputs.from || steps.resolve-from.outputs.sha }}"
          INPUTS_TO: "${{ inputs.to || steps.resolve-to.outputs.sha }}"
          INPUTS_OWNER: "${{ inputs.owner }}"
          INPUTS_REPO: "${{ inputs.repo }}"
        run: |
          # shellcheck disable=SC2016
          gh api graphql \
            --hostname "${INPUTS_HOST}" \
            -F owner="${INPUTS_OWNER}" \
            -F repo="${INPUTS_REPO}" \
            -F from="${INPUTS_FROM}" \
            -F to="${INPUTS_TO}" \
            -F query='
              query($owner: String!, $repo: String!, $from: String!, $to: String!) {
                repository(owner: $owner, name: $repo) {
                  to: object(expression: $to) {
                    ... Submodules
                  }
                  from: object(expression: $from) {
                    ... Submodules
                  }
              }
            }
            fragment Submodules on Commit {
              submodules(first: 100) {
                nodes {
                  name
                  gitUrl
                  subprojectCommitOid
                }
              }
            }
          ' --jq '
          (.data.repository.to.submodules.nodes[] | [{ key: .name, value: { name: .name, gitUrl: .gitUrl, to : .subprojectCommitOid } }] | from_entries),
          (.data.repository.from.submodules.nodes[] | [{ key: .name, value: { name: .name, gitUrl: .gitUrl, from : .subprojectCommitOid } }] | from_entries)
          ' \
          | jq -s 'reduce .[] as $n ({}; . * $n) | to_entries | [.[].value] | map(select(.from != null and .to != null and .from != .to))' | tee -a submodules.json
          SUBMODULES=$(jq -c < submodules.json)
          echo "submodules=${SUBMODULES}" >> "${GITHUB_OUTPUT}"


  submodules-changelog:
    name: submodules-changelog - ${{ matrix.name }}
    runs-on: "${{ fromJSON(inputs.runs-on) }}"
    needs: get-submodules-diff
    if: fromJson(needs.get-submodules-diff.outputs.submodules)[0] != null
    strategy:
      fail-fast: false
      matrix:
        include:
          "${{ fromJson( needs.get-submodules-diff.outputs.submodules ) }}"
    steps:
      - name: Get changelog
        id: changelog
        uses: srz-zumix/changelog-template-action@main
        with:
          template: "${{ inputs.template }}"
          git_url: "${{ matrix.gitUrl }}"
          from: "${{ matrix.from }}"
          to: "${{ matrix.to }}"
          output_file: ${{ runner.temp }}/changelog.md
      - name: Comment to
        uses: srz-zumix/retry-run-action@v0
        with:
          run: |
            # shellcheck disable=SC2016
            gh pr comment -R "${{ inputs.owner }}/${{ inputs.repo }}" "${{ inputs.pr }}" --body-file ${{ runner.temp }}/changelog.md ${{ inputs.gh_comment_options }}
        if: steps.changelog.outputs.commit_count > 0
